<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>comment</key>
    <string>Specificities of Fortran &gt;= 90</string>
    <key>name</key>
    <string>Fortran - Free Form</string>
    <key>scopeName</key>
    <string>source.fortran.free</string>
    <key>fileTypes</key>
    <array>
      <string>f90</string>
      <string>F90</string>
      <string>f95</string>
      <string>F95</string>
      <string>f03</string>
      <string>F03</string>
      <string>f08</string>
      <string>F08</string>
      <string>f18</string>
      <string>F18</string>
      <string>fpp</string>
      <string>FPP</string>
      <string>.pf</string>
      <string>.PF</string>
    </array>
    <key>firstLineMatch</key>
    <string>(?i)-[*]- mode: fortran free -[*]-</string>
    <key>injections</key>
    <dict>
      <key>source.fortran.free - ( string | comment | meta.preprocessor )</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#line-continuation-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor</string>
          </dict>
        </array>
      </dict>
      <key>string.quoted.double.fortran</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string-line-continuation-operator</string>
          </dict>
        </array>
      </dict>
      <key>string.quoted.single.fortran</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string-line-continuation-operator</string>
          </dict>
        </array>
      </dict>
    </dict>
    <key>patterns</key>
    <array>
      <dict>
        <key>include</key>
        <string>#preprocessor</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#comments</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#constants</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#operators</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#array-constructor</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#parentheses</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#include-statement</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#import-statement</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#block-data-definition</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#function-definition</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#module-definition</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#program-definition</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#submodule-definition</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#subroutine-definition</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#procedure-definition</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#derived-type-definition</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#enum-block-construct</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#interface-block-constructs</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#procedure-specification-statement</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#type-specification-statements</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#specification-statements</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#control-constructs</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#control-statements</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#execution-statements</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#intrinsic-functions</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#variable</string>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>preprocessor</key>
      <dict>
        <key>name</key>
        <string>meta.preprocessor</string>
        <key>begin</key>
        <string>^\s*(#:?)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.preprocessor.indicator.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\n</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#preprocessor-if-construct</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-statements</string>
          </dict>
        </array>
      </dict>
      <key>preprocessor-comments</key>
      <dict>
        <key>name</key>
        <string>comment.preprocessor</string>
        <key>begin</key>
        <string>/\*</string>
        <key>end</key>
        <string>\*/</string>
      </dict>
      <key>preprocessor-constants</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#cpp-numeric-constant</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-string-constant</string>
          </dict>
        </array>
      </dict>
      <key>cpp-numeric-constant</key>
      <dict>
        <key>match</key>
        <string>(?&lt;!\w)\.?\d(?:(?:[0-9a-zA-Z_\.]|')|(?&lt;=[eEpP])[+-])*</string>
        <key>captures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(?=.)</string>
                <key>end</key>
                <string>$</string>
                <key>beginCaptures</key>
                <dict/>
                <key>endCaptures</key>
                <dict/>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>match</key>
                    <string>(\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?&lt;=[0-9a-fA-F])\.|\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?(?:(?&lt;!')([pP])((?:\+)?)((?:\-)?)([0-9](?:[0-9]|(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?([lLfF](?!\w))?((?:\w(?&lt;![0-9a-fA-FpP])\w*)?$)</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.hexadecimal.cpp</string>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.hexadecimal.cpp</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric.cpp</string>
                          </dict>
                        </array>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.separator.constant.numeric.cpp</string>
                      </dict>
                      <key>4</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.hexadecimal.cpp</string>
                      </dict>
                      <key>5</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.hexadecimal.cpp</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric.cpp</string>
                          </dict>
                        </array>
                      </dict>
                      <key>6</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.separator.constant.numeric.cpp</string>
                      </dict>
                      <key>7</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.exponent.hexadecimal.cpp</string>
                      </dict>
                      <key>8</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.plus.exponent.hexadecimal.cpp</string>
                      </dict>
                      <key>9</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.minus.exponent.hexadecimal.cpp</string>
                      </dict>
                      <key>10</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.exponent.hexadecimal.cpp</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric.cpp</string>
                          </dict>
                        </array>
                      </dict>
                      <key>11</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.suffix.floating-point.cpp</string>
                      </dict>
                      <key>12</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.user-defined.cpp</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>\G(?=[0-9.])(?!0[xXbB])([0-9](?:[0-9]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?&lt;=[0-9])\.|\.(?=[0-9])))([0-9](?:[0-9]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?(?:(?&lt;!')([eE])((?:\+)?)((?:\-)?)([0-9](?:[0-9]|(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?([lLfF](?!\w))?((?:\w(?&lt;![0-9eE])\w*)?$)</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.decimal.cpp</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric.cpp</string>
                          </dict>
                        </array>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.separator.constant.numeric.cpp</string>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.decimal.point.cpp</string>
                      </dict>
                      <key>4</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.decimal.cpp</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric.cpp</string>
                          </dict>
                        </array>
                      </dict>
                      <key>5</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.separator.constant.numeric.cpp</string>
                      </dict>
                      <key>6</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.exponent.decimal.cpp</string>
                      </dict>
                      <key>7</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.plus.exponent.decimal.cpp</string>
                      </dict>
                      <key>8</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.minus.exponent.decimal.cpp</string>
                      </dict>
                      <key>9</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.exponent.decimal.cpp</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric.cpp</string>
                          </dict>
                        </array>
                      </dict>
                      <key>10</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.suffix.floating-point.cpp</string>
                      </dict>
                      <key>11</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.user-defined.cpp</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(\G0[bB])([01](?:[01]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\w))?((?:\w(?&lt;![0-9])\w*)?$)</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.binary.cpp</string>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.binary.cpp</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric.cpp</string>
                          </dict>
                        </array>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.separator.constant.numeric.cpp</string>
                      </dict>
                      <key>4</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.suffix.integer.cpp</string>
                      </dict>
                      <key>5</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.user-defined.cpp</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(\G0)((?:[0-7]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\w))?((?:\w(?&lt;![0-9])\w*)?$)</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.octal.cpp</string>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.octal.cpp</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric.cpp</string>
                          </dict>
                        </array>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.separator.constant.numeric.cpp</string>
                      </dict>
                      <key>4</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.suffix.integer.cpp</string>
                      </dict>
                      <key>5</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.user-defined.cpp</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)(?:(?&lt;!')([pP])((?:\+)?)((?:\-)?)([0-9](?:[0-9]|(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\w))?((?:\w(?&lt;![0-9a-fA-FpP])\w*)?$)</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.hexadecimal.cpp</string>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.hexadecimal.cpp</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric.cpp</string>
                          </dict>
                        </array>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.separator.constant.numeric.cpp</string>
                      </dict>
                      <key>4</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.exponent.hexadecimal.cpp</string>
                      </dict>
                      <key>5</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.plus.exponent.hexadecimal.cpp</string>
                      </dict>
                      <key>6</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.minus.exponent.hexadecimal.cpp</string>
                      </dict>
                      <key>7</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.exponent.hexadecimal.cpp</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric.cpp</string>
                          </dict>
                        </array>
                      </dict>
                      <key>8</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.suffix.integer.cpp</string>
                      </dict>
                      <key>9</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.user-defined.cpp</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>\G(?=[0-9.])(?!0[xXbB])([0-9](?:[0-9]|((?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)(?:(?&lt;!')([eE])((?:\+)?)((?:\-)?)([0-9](?:[0-9]|(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F]))*))?((?:[uU]|(?:[uU]ll?)|(?:[uU]LL?)|(?:ll?[uU]?)|(?:LL?[uU]?)|[fF])(?!\w))?((?:\w(?&lt;![0-9eE])\w*)?$)</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.decimal.cpp</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric.cpp</string>
                          </dict>
                        </array>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.separator.constant.numeric.cpp</string>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.exponent.decimal.cpp</string>
                      </dict>
                      <key>4</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.plus.exponent.decimal.cpp</string>
                      </dict>
                      <key>5</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.minus.exponent.decimal.cpp</string>
                      </dict>
                      <key>6</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.exponent.decimal.cpp</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>match</key>
                            <string>(?&lt;=[0-9a-fA-F])'(?=[0-9a-fA-F])</string>
                            <key>name</key>
                            <string>punctuation.separator.constant.numeric.cpp</string>
                          </dict>
                        </array>
                      </dict>
                      <key>7</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.suffix.integer.cpp</string>
                      </dict>
                      <key>8</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.other.unit.user-defined.cpp</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(?:(?:[0-9a-zA-Z_\.]|')|(?&lt;=[eEpP])[+-])+</string>
                    <key>name</key>
                    <string>invalid.illegal.constant.numeric.cpp</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </dict>
      </dict>
      <key>preprocessor-string-constant</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Double quote string</string>
            <key>name</key>
            <string>string.quoted.double.include.preprocessor.fortran</string>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.preprocessor.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>"</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.preprocessor.fortran</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>comment</key>
            <string>Single quote string</string>
            <key>name</key>
            <string>string.quoted.single.include.preprocessor.fortran</string>
            <key>begin</key>
            <string>'</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.preprocessor.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>'</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.preprocessor.fortran</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>preprocessor-if-construct</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.preprocessor.conditional.fortran</string>
            <key>begin</key>
            <string>(?i)\G\s*\b(if)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.preprocessor.if.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\n)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#preprocessor-comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#cpp-numeric-constant</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-logical-operators</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-arithmetic-operators</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-defined-function</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-line-continuation-operator</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\G\s*\b(ifdef)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.preprocessor.ifdef.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\n)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#preprocessor-comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#cpp-numeric-constant</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-logical-operators</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-arithmetic-operators</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-line-continuation-operator</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\G\s*\b(ifndef)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.preprocessor.ifndef.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\n)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#preprocessor-comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#cpp-numeric-constant</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-logical-operators</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-arithmetic-operators</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-line-continuation-operator</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\G\s*\b(else)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.preprocessor.else.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\n)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#preprocessor-comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#cpp-numeric-constant</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\G\s*\b(elif)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.preprocessor.elif.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\n)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#preprocessor-comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#cpp-numeric-constant</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-logical-operators</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-arithmetic-operators</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-defined-function</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#preprocessor-line-continuation-operator</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\G\s*\b(endif)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.preprocessor.endif.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\n)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#preprocessor-comments</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>preprocessor-defined-function</key>
      <dict>
        <key>match</key>
        <string>(?i)\b(defined)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.preprocessor.defined.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>preprocessor-operators</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#preprocessor-line-continuation-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-logical-operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-arithmetic-operators</string>
          </dict>
        </array>
      </dict>
      <key>preprocessor-assignment-operator</key>
      <dict>
        <key>name</key>
        <string>keyword.operator.assignment.preprocessor.fortran</string>
        <key>comment</key>
        <string>assignments with = are not allowed</string>
        <key>match</key>
        <string>(?&lt;!\=)(\=)(?!\=)</string>
      </dict>
      <key>preprocessor-line-continuation-operator</key>
      <dict>
        <key>begin</key>
        <string>\s*(\\)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>constant.character.escape.line-continuation.preprocessor.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?i)^</string>
      </dict>
      <key>preprocessor-logical-operators</key>
      <dict>
        <key>name</key>
        <string>keyword.operator.logical.preprocessor.fortran</string>
        <key>comment</key>
        <string>and:&amp;&amp;, bitand:&amp;, or:||, bitor:|, not eq:!=, not:!, xor:^, compl:~</string>
        <key>match</key>
        <string>(&amp;&amp;)|(==)|(\!=)|(\|\|)|(\&lt;\=)|(\&gt;=)|(\&lt;)|(\&gt;)|(~)|(\^)|(&amp;)|(\!)|(\|)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.logical.preprocessor.and.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.logical.preprocessor.equals.fortran</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.logical.preprocessor.not_equals.fortran</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.logical.preprocessor.or.fortran</string>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.logical.preprocessor.less_eq.fortran</string>
          </dict>
          <key>6</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.logical.preprocessor.more_eq.fortran</string>
          </dict>
          <key>7</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.logical.preprocessor.less.fortran</string>
          </dict>
          <key>8</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.logical.preprocessor.more.fortran</string>
          </dict>
          <key>9</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.logical.preprocessor.complementary.fortran</string>
          </dict>
          <key>10</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.logical.preprocessor.xor.fortran</string>
          </dict>
          <key>11</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.logical.preprocessor.bitand.fortran</string>
          </dict>
          <key>12</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.logical.preprocessor.not.fortran</string>
          </dict>
          <key>13</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.logical.preprocessor.bitor.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>preprocessor-arithmetic-operators</key>
      <dict>
        <key>comment</key>
        <string>division regex is different than in main fortran</string>
        <key>match</key>
        <string>(\-)|(\+)|(\/)|(\*)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.subtraction.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.addition.fortran</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.division.fortran</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.multiplication.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>preprocessor-statements</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#preprocessor-define-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-error-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-include-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-preprocessor-pragma-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-undefine-statement</string>
          </dict>
        </array>
      </dict>
      <key>preprocessor-define-statement</key>
      <dict>
        <key>name</key>
        <string>meta.preprocessor.macro.fortran</string>
        <key>begin</key>
        <string>(?i)\G\s*\b(define)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.preprocessor.define.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\n)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#preprocessor-comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-constants</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-line-continuation-operator</string>
          </dict>
        </array>
      </dict>
      <key>preprocessor-error-statement</key>
      <dict>
        <key>name</key>
        <string>meta.preprocessor.macro.fortran</string>
        <key>begin</key>
        <string>(?i)\G\s*(error)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.preprocessor.error.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\n)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#preprocessor-comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-string-constant</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-line-continuation-operator</string>
          </dict>
        </array>
      </dict>
      <key>preprocessor-include-statement</key>
      <dict>
        <key>name</key>
        <string>meta.preprocessor.include.fortran</string>
        <key>begin</key>
        <string>(?i)\G\s*(include)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.preprocessor.include.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\n)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#preprocessor-comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-string-constant</string>
          </dict>
          <dict>
            <key>name</key>
            <string>string.quoted.other.lt-gt.include.preprocessor.fortran</string>
            <key>begin</key>
            <string>&lt;</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.preprocessor.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>&gt;</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.preprocessor.fortran</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#line-continuation-operator</string>
          </dict>
        </array>
      </dict>
      <key>preprocessor-pragma-statement</key>
      <dict>
        <key>name</key>
        <string>meta.preprocessor.pragma.fortran</string>
        <key>begin</key>
        <string>(?i)\G\s*\b(pragma)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.preprocessor.pragma.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\n)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#preprocessor-comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-string-constant</string>
          </dict>
        </array>
      </dict>
      <key>preprocessor-undefine-statement</key>
      <dict>
        <key>name</key>
        <string>meta.preprocessor.undef.fortran</string>
        <key>begin</key>
        <string>(?i)\G\s*\b(undef)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.preprocessor.undef.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\n)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#preprocessor-comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#preprocessor-line-continuation-operator</string>
          </dict>
        </array>
      </dict>
      <key>abstract-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2003 standard.</string>
        <key>match</key>
        <string>(?i)\G\s*\b(abstract)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.fortran.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>access-attribute</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#private-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#public-attribute</string>
          </dict>
        </array>
      </dict>
      <key>allocatable-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(allocatable)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.allocatable.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>asynchronous-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2003 standard.</string>
        <key>match</key>
        <string>(?i)\G\s*\b(asynchronous)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.asynchronous.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>codimension-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2008 standard.</string>
        <key>begin</key>
        <string>(?i)\G\s*\b(codimension)(?=\s*\[)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.codimension.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;!\G)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#brackets</string>
          </dict>
        </array>
      </dict>
      <key>contiguous-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2008 standard.</string>
        <key>match</key>
        <string>(?i)\G\s*\b(contiguous)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.contigous.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>concurrent-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2003 standard.</string>
        <key>begin</key>
        <string>(?i)\G\s*\b(concurrent)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.while.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parentheses</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#invalid-word</string>
          </dict>
        </array>
      </dict>
      <key>deferred-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2003 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(deferred)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.deferred.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>dimension-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1977 standard.</string>
        <key>begin</key>
        <string>(?i)\s*\b(dimension)(?=\s*\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.dimension.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;!\G)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parentheses-dummy-variables</string>
          </dict>
        </array>
      </dict>
      <key>elemental-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(elemental)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.elemental.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>extends-attribute</key>
      <dict>
        <key>begin</key>
        <string>(?i)\s*\b(extends)\s*\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.extends.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?:\)|(?=\n))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>entity.name.type.fortran</string>
            <key>match</key>
            <string>(?i)\s*\b([a-z]\w*)\b</string>
          </dict>
        </array>
      </dict>
      <key>external-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1977 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(external)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.external.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>intent-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>begin</key>
        <string>(?i)\s*\b(intent)\s*(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.intent.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.left.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\))|(?=[;!\n])</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.left.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?i)\b(?:(in\s*out)|(in)|(out))\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.intent.in-out.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.intent.in.fortran</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.intent.out.fortran</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#invalid-word</string>
          </dict>
        </array>
      </dict>
      <key>intrinsic-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1977 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(intrinsic)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.intrinsic.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>language-binding-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in Fortran 2003 standard.</string>
        <key>begin</key>
        <string>(?i)\s*\b(bind)\s*\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.bind.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?:\)|(?=\n))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>variable.parameter.fortran</string>
            <key>match</key>
            <string>(?i)\b(c)\b</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#dummy-variable</string>
          </dict>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>module-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>match</key>
        <string>(?ix)\s*\b(module)\b(?=\s*(?:[;!\n]| [^'";!\n]*\b(?:function|procedure|subroutine)\b))</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.module.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>non-intrinsic-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(non_intrinsic)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.non-intrinsic.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>non-overridable-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2003 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(non_overridable)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.non-overridable.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>nopass-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2003 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(nopass)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.nopass.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>optional-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(optional)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.optional.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>parameter-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1977 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(parameter)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.parameter.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>pass-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2003 standard.</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Pass attribute with argument.</string>
            <key>begin</key>
            <string>(?i)\s*\b(pass)\s*\(</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.pass.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)|(?=\n)</string>
            <key>patterns</key>
            <array/>
          </dict>
          <dict>
            <key>comment</key>
            <string>Pass attribute without argument.</string>
            <key>match</key>
            <string>(?i)\s*\b(pass)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.pass.fortran</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>pointer-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(pointer)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.pointer.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>private-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(private)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.private.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>protected-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2003 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(protected)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.protected.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>public-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(public)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.public.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>pure-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1995 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(?:(impure)|(pure))\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.impure.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.pure.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>recursive-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1977 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(?:(non_recursive)|(recursive))\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.non_recursive.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.recursive.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>save-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1977 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(save)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.save.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>sequence-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 20?? standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(sequence)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.sequence.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>target-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(target)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.target.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>value-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2003 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(value)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.value.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>volatile-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2003 standard.</string>
        <key>match</key>
        <string>(?i)\s*\b(volatile)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.volatile.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>while-attribute</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1995 standard.</string>
        <key>begin</key>
        <string>(?i)\G\s*\b(while)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.while.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parentheses</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#invalid-word</string>
          </dict>
        </array>
      </dict>
      <key>comments</key>
      <dict>
        <key>name</key>
        <string>comment.line.fortran</string>
        <key>begin</key>
        <string>!</string>
        <key>end</key>
        <string>(?=\n)</string>
      </dict>
      <key>constants</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#logical-constant</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#numeric-constant</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string-constant</string>
          </dict>
        </array>
      </dict>
      <key>logical-constant</key>
      <dict>
        <key>comment</key>
        <string>Logical constants</string>
        <key>match</key>
        <string>(?i)\s*(?:(\.false\.)|(\.true\.))</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>constant.language.logical.false.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>constant.language.logical.true.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>numeric-constant</key>
      <dict>
        <key>comment</key>
        <string>Numeric constants</string>
        <key>name</key>
        <string>constant.numeric.fortran</string>
        <key>match</key>
        <string>(?ix)[\+\-]?(\b\d+\.?\d*|\.\d+) (_\w+|d[\+\-]?\d+|e[\+\-]?\d+(_\w+)?)?(?![a-z_])</string>
      </dict>
      <key>string-constant</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1977 standard.</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>String</string>
            <key>name</key>
            <string>string.quoted.single.fortran</string>
            <key>begin</key>
            <string>'</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>'</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.fortran</string>
              </dict>
            </dict>
            <key>applyEndPatternLast</key>
            <integer>1</integer>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>constant.character.escape.apostrophe.fortran</string>
                <key>match</key>
                <string>''</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>String</string>
            <key>name</key>
            <string>string.quoted.double.fortran</string>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>"</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.fortran</string>
              </dict>
            </dict>
            <key>applyEndPatternLast</key>
            <integer>1</integer>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>constant.character.escape.quote.fortran</string>
                <key>match</key>
                <string>""</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>control-constructs</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#named-control-constructs</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#unnamed-control-constructs</string>
          </dict>
        </array>
      </dict>
      <key>named-control-constructs</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>contentName</key>
        <string>meta.named-construct.fortran.modern</string>
        <key>begin</key>
        <string>(?ix)([a-z]\w*)\s*(:)(?=\s*(?:associate|block(?!\s*data)|critical|do|forall|if|select\s*case|select\s*type|select\s*rank|where)\b)</string>
        <key>end</key>
        <string>(?i)(?!\s*\b(?:associate|block(?!\s*data)|critical|do|forall|if|select\s*case|select\s*type|select\s*rank|where)\b)(?:\b(\1)\b)?([^\s;!\n]*?)?(?=\s*[;!\n])</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>meta.label.end.name.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>invalid.error.named-control-constructs.fortran.modern</string>
          </dict>
        </dict>
        <key>applyEndPatternLast</key>
        <integer>1</integer>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#unnamed-control-constructs</string>
          </dict>
        </array>
      </dict>
      <key>unnamed-control-constructs</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#associate-construct</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block-construct</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#critical-construct</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#do-construct</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#forall-construct</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#if-construct</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#select-case-construct</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#select-type-construct</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#select-rank-construct</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#where-construct</string>
          </dict>
        </array>
      </dict>
      <key>associate-construct</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2003 standard.</string>
        <key>contentName</key>
        <string>meta.block.associate.fortran</string>
        <key>begin</key>
        <string>(?i)\b(associate)\b(?=\s*\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.associate.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?i)\b(end\s*associate)\b</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.endassociate.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>block-construct</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2008 standard.</string>
        <key>contentName</key>
        <string>meta.block.block.fortran</string>
        <key>begin</key>
        <string>(?i)\b(block)\b(?!\s*\bdata\b)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.associate.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?i)\b(end\s*block)\b</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.endassociate.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>critical-construct</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2008 standard.</string>
        <key>contentName</key>
        <string>meta.block.critical.fortran</string>
        <key>begin</key>
        <string>(?i)\b(critical)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.associate.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?i)\b(end\s*critical)\b</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.endassociate.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>do-construct</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?i)\b(end\s*do)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.enddo.fortran</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>comment</key>
            <string>Introduced in the Fortran 1977 standard.</string>
            <key>name</key>
            <string>meta.do.labeled.fortran</string>
            <key>begin</key>
            <string>(?i)\b(do)\s+(\d{1,5})</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.do.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?i)(?:^|(?&lt;=;))(?=\s*\b\2\b)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>comment</key>
                <string>Loop control.</string>
                <key>begin</key>
                <string>(?i)\G(?:\s*(,)|(?!\s*[;!\n]))</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.comma.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=[;!\n])</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#concurrent-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#while-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>$base</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>$base</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Introduced in the Fortran 1995 standard.</string>
            <key>name</key>
            <string>meta.block.do.unlabeled.fortran</string>
            <key>begin</key>
            <string>(?i)\b(do)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.do.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?i)\b(?:(continue)|(end\s*do))\b</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.continue.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.enddo.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>comment</key>
                <string>Loop control.</string>
                <key>name</key>
                <string>meta.loop-control.fortran</string>
                <key>begin</key>
                <string>(?i)\G(?:\s*(,)|(?!\s*[;!\n]))</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.comma.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=[;!\n])</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#concurrent-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#while-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>$base</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>comment</key>
                <string>Loop body.</string>
                <key>begin</key>
                <string>(?i)(?!\s*\b(continue|end\s*do)\b)</string>
                <key>end</key>
                <string>(?i)(?=\s*\b(continue|end\s*do)\b)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>$base</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>if-construct</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?i)\b(if)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.if.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#logical-control-expression</string>
              </dict>
              <dict>
                <key>contentName</key>
                <string>meta.block.if.fortran</string>
                <key>begin</key>
                <string>(?i)\s*\b(then)\b</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.then.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?i)\b(end\s*if)\b</string>
                <key>endCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.endif.fortran</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>comment</key>
                    <string>else if statement</string>
                    <key>begin</key>
                    <string>(?i)\b(else\s*if)\b</string>
                    <key>beginCaptures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.control.elseif.fortran</string>
                      </dict>
                    </dict>
                    <key>end</key>
                    <string>(?=[;!\n])</string>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#parentheses</string>
                      </dict>
                      <dict>
                        <key>comment</key>
                        <string>capture the label if present</string>
                        <key>match</key>
                        <string>(?i)\b(then)\b(\s*[a-z]\w*)?</string>
                        <key>captures</key>
                        <dict>
                          <key>1</key>
                          <dict>
                            <key>name</key>
                            <string>keyword.control.then.fortran</string>
                          </dict>
                          <key>2</key>
                          <dict>
                            <key>name</key>
                            <string>meta.label.elseif.fortran</string>
                          </dict>
                        </dict>
                      </dict>
                      <dict>
                        <key>include</key>
                        <string>#invalid-word</string>
                      </dict>
                    </array>
                  </dict>
                  <dict>
                    <key>comment</key>
                    <string>else block</string>
                    <key>begin</key>
                    <string>(?i)\b(else)\b</string>
                    <key>beginCaptures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.control.else.fortran</string>
                      </dict>
                    </dict>
                    <key>end</key>
                    <string>(?i)(?=\b(end\s*if)\b)</string>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>comment</key>
                        <string>rest of else line</string>
                        <key>begin</key>
                        <string>(?!(\s*(;|!|\n)))</string>
                        <key>end</key>
                        <string>(?=[;!\n])</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>comment</key>
                            <string>capture the label if present</string>
                            <key>match</key>
                            <string>\s*([a-z]\w*)?\s*\b(\w*)\b</string>
                            <key>captures</key>
                            <dict>
                              <key>1</key>
                              <dict>
                                <key>name</key>
                                <string>meta.label.else.fortran</string>
                              </dict>
                              <key>2</key>
                              <dict>
                                <key>name</key>
                                <string>invalid.error.label.else.fortran</string>
                              </dict>
                            </dict>
                          </dict>
                          <dict>
                            <key>include</key>
                            <string>#invalid-word</string>
                          </dict>
                        </array>
                      </dict>
                      <dict>
                        <key>begin</key>
                        <string>(?i)(?!\b(end\s*if)\b)</string>
                        <key>end</key>
                        <string>(?i)(?=\b(end\s*if)\b)</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>include</key>
                            <string>$base</string>
                          </dict>
                        </array>
                      </dict>
                    </array>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>$base</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>name</key>
                <string>meta.statement.control.if.fortran</string>
                <key>begin</key>
                <string>(?i)(?=\s*[a-z])</string>
                <key>end</key>
                <string>(?=[;!\n])</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>$base</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>select-case-construct</key>
      <dict>
        <key>comment</key>
        <string>Select case construct. Introduced in the Fortran 1990 standard.</string>
        <key>name</key>
        <string>meta.block.select.case.fortran</string>
        <key>begin</key>
        <string>(?i)\b(select\s*case)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.selectcase.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?i)\b(end\s*select)\b</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.endselect.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parentheses</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\b(case)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.case.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?i)(?=[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>(?i)\G\s*\b(default)\b</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.default.fortran</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>include</key>
                <string>#parentheses</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#invalid-word</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>select-type-construct</key>
      <dict>
        <key>comment</key>
        <string>Select type construct. Introduced in the Fortran 2003 standard.</string>
        <key>name</key>
        <string>meta.block.select.type.fortran</string>
        <key>begin</key>
        <string>(?i)\b(select\s*type)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.selecttype.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?i)\b(end\s*select)\b</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.endselect.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parentheses</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\b(?:(class)|(type))\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.class.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.type.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?i)(?=[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>(?i)\G\s*\b(default)\b</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.default.fortran</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>(?i)\G\s*\b(is)\b</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.is.fortran</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>include</key>
                <string>#parentheses</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#invalid-word</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>select-rank-construct</key>
      <dict>
        <key>comment</key>
        <string>Select rank construct. Introduced in the Fortran 2008 standard.</string>
        <key>name</key>
        <string>meta.block.select.rank.fortran</string>
        <key>begin</key>
        <string>(?i)\b(select\s*rank)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.selectrank.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?i)\b(end\s*select)\b</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.endselect.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parentheses</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\b(rank)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.rank.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?i)(?=[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>(?i)\G\s*\b(default)\b</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.default.fortran</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>include</key>
                <string>#parentheses</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#invalid-word</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>where-construct</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Introduced in the Fortran 1990 standard.</string>
            <key>begin</key>
            <string>(?i)\b(where)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.where.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>applyEndPatternLast</key>
            <integer>1</integer>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#logical-control-expression</string>
              </dict>
              <dict>
                <key>name</key>
                <string>meta.block.where.fortran</string>
                <key>begin</key>
                <string>(?&lt;=\))(?=\s*[;!\n])</string>
                <key>end</key>
                <string>(?i)\b(end\s*where)\b</string>
                <key>endCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.endwhere.fortran</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>begin</key>
                    <string>(?i)\s*\b(else\s*where)\b</string>
                    <key>beginCaptures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.control.elsewhere.fortran</string>
                      </dict>
                    </dict>
                    <key>end</key>
                    <string>(?=[;!\n])</string>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#parentheses</string>
                      </dict>
                      <dict>
                        <key>include</key>
                        <string>#invalid-word</string>
                      </dict>
                    </array>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>$base</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>name</key>
                <string>meta.statement.control.where.fortran</string>
                <key>begin</key>
                <string>(?i)(?&lt;=\))(?!\s*[;!\n])</string>
                <key>end</key>
                <string>\n</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>$base</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>forall-construct</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1995 standard.</string>
        <key>begin</key>
        <string>(?i)\b(forall)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.forall.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;!\G)</string>
        <key>applyEndPatternLast</key>
        <integer>1</integer>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Loop control.</string>
            <key>name</key>
            <string>meta.loop-control.fortran</string>
            <key>begin</key>
            <string>(?i)\G(?!\s*[;!\n])</string>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#invalid-word</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.block.forall.fortran</string>
            <key>begin</key>
            <string>(?&lt;=\))(?=\s*[;!\n])</string>
            <key>end</key>
            <string>(?i)\b(end\s*forall)\b</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.endforall.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$base</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.statement.control.forall.fortran</string>
            <key>begin</key>
            <string>(?i)(?&lt;=\))(?!\s*[;!\n])</string>
            <key>end</key>
            <string>\n</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$base</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>control-statements</key>
      <dict>
        <key>comment</key>
        <string>Statements controlling the flow of the program</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#assign-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#call-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#continue-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#cycle-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#entry-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#error-stop-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#exit-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#goto-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#pause-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#return-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#stop-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#where-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#image-control-statement</string>
          </dict>
        </array>
      </dict>
      <key>assign-statement</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Introduced in the Fortran 1977 standard.</string>
            <key>name</key>
            <string>meta.statement.control.assign.fortran</string>
            <key>begin</key>
            <string>(?i)\b(assign)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.assign.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>(?i)\s*\b(to)\b</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.to.fortran</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>include</key>
                <string>$base</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>call-statement</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Introduced in the Fortran 1977 standard.</string>
            <key>name</key>
            <string>meta.statement.control.call.fortran</string>
            <key>begin</key>
            <string>(?i)\s*\b(call)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.call.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>comment</key>
                <string>type-bound subroutines</string>
                <key>begin</key>
                <string>(?ix)\G\s*([a-z]\w*)(%)([a-z]\w*)\b\s*(?=\()</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>variable.other.fortran</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.accessor.fortran</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>entity.name.function.subroutine.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?&lt;!\G)</string>
                <key>endCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.parentheses.right.fortran</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#parentheses-dummy-variables</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#intrinsic-subroutines</string>
              </dict>
              <dict>
                <key>comment</key>
                <string>User defined subroutine.</string>
                <key>begin</key>
                <string>(?i)\G\s*\b([a-z]\w*)\s*(?=\()</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>entity.name.function.subroutine.fortran</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.parentheses.left.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?&lt;!\G)</string>
                <key>endCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.parentheses.right.fortran</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#parentheses-dummy-variables</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>comment</key>
                <string>User defined subroutine.</string>
                <key>match</key>
                <string>(?i)\G\s*\b([a-z]\w*)\b(?=\s*[;!\n])</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>entity.name.function.subroutine.fortran</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>include</key>
                <string>$base</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>continue-statement</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Introduced in the Fortran 1977 standard.</string>
            <key>name</key>
            <string>meta.statement.control.continue.fortran</string>
            <key>begin</key>
            <string>(?i)\s*\b(continue)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.continue.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#invalid-character</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>cycle-statement</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Introduced in the Fortran 1990 standard.</string>
            <key>name</key>
            <string>meta.statement.control.fortran</string>
            <key>begin</key>
            <string>(?i)\s*\b(cycle)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.cycle.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[;!\n])</string>
            <key>patterns</key>
            <array/>
          </dict>
        </array>
      </dict>
      <key>entry-statement</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Introduced in the Fortran 1977 standard.</string>
            <key>name</key>
            <string>meta.statement.control.entry.fortran</string>
            <key>begin</key>
            <string>(?i)\s*\b(entry)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.entry.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(?i)\s*\b([a-z]\w*)\b</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>entity.name.function.entry.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=[;!\n])</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#dummy-variable-list</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#result-statement</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#language-binding-attribute</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>error-stop-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2008 standard.</string>
        <key>name</key>
        <string>meta.statement.control.errorstop.fortran</string>
        <key>begin</key>
        <string>(?i)\s*\b(error\s+stop)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.errorstop.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#constants</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string-operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#invalid-character</string>
          </dict>
        </array>
      </dict>
      <key>exit-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>name</key>
        <string>meta.statement.control.exit.fortran</string>
        <key>begin</key>
        <string>(?i)\s*\b(exit)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.exit.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array/>
      </dict>
      <key>goto-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1977 standard.</string>
        <key>name</key>
        <string>meta.statement.control.goto.fortran</string>
        <key>begin</key>
        <string>(?i)\s*\b(go\s*to)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.goto.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>pause-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1977 standard.</string>
        <key>name</key>
        <string>meta.statement.control.pause.fortran</string>
        <key>begin</key>
        <string>(?i)\s*\b(pause)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.pause.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#constants</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#invalid-character</string>
          </dict>
        </array>
      </dict>
      <key>result-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>begin</key>
        <string>(?i)\s*\b(result)\s*(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.result.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.left.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.right.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#dummy-variable</string>
          </dict>
        </array>
      </dict>
      <key>return-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1977 standard.</string>
        <key>name</key>
        <string>meta.statement.control.return.fortran</string>
        <key>begin</key>
        <string>(?i)\s*\b(return)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.return.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#invalid-character</string>
          </dict>
        </array>
      </dict>
      <key>stop-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1977 standard.</string>
        <key>name</key>
        <string>meta.statement.control.stop.fortran</string>
        <key>begin</key>
        <string>(?i)\s*\b(stop)\b(?:\s*\b([a-z]\w*)\b)?</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.stop.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>meta.label.stop.stop</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#constants</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string-operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#invalid-character</string>
          </dict>
        </array>
      </dict>
      <key>derived-type-definition</key>
      <dict>
        <key>name</key>
        <string>meta.derived-type.definition.fortran</string>
        <key>begin</key>
        <string>(?i)\b(type)\b(?!\s*(\(|is\b|\=))</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.type.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Attribute list.</string>
            <key>contentName</key>
            <string>meta.attribute-list.derived-type.fortran</string>
            <key>begin</key>
            <string>\G(?=\s*(,|::))</string>
            <key>end</key>
            <string>(::)|(?=[;!\n])</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.double-colon.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(,)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.comma.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=::|[,;!\n])</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#access-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#abstract-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#language-binding-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#extends-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#invalid-word</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\s*\b([a-z]\w*)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?i)(?:^|(?&lt;=;))\s*(end\s*type)(?:\s+(?:(\1)|(\w+)))?\b</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.endtype.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.fortran</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>invalid.error.derived-type.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#dummy-variable-list</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>comment</key>
                <string>Derived type specification block.</string>
                <key>name</key>
                <string>meta.block.specification.derived-type.fortran</string>
                <key>begin</key>
                <string>(?i)^(?!\s*\b(?:contains|end\s*type)\b)</string>
                <key>end</key>
                <string>(?i)^(?=\s*\b(?:contains|end\s*type)\b)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#comments</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#derived-type-component-attribute-specification</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#derived-type-component-parameter-specification</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#derived-type-component-procedure-specification</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#derived-type-component-type-specification</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>comment</key>
                <string>Derived type contains block.</string>
                <key>name</key>
                <string>meta.block.contains.fortran</string>
                <key>begin</key>
                <string>(?i)\b(contains)\b</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.contains.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?i)(?=\s*end\s*type\b)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#comments</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#derived-type-contains-attribute-specification</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#derived-type-contains-final-procedure-specification</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#derived-type-contains-generic-procedure-specification</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#derived-type-contains-procedure-specification</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>derived-type-component-attribute-specification</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1995 standard.</string>
        <key>name</key>
        <string>meta.statement.attribute-specification.fortran</string>
        <key>begin</key>
        <string>(?i)(?=\s*\b(?:private|sequence)\b)</string>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#access-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#sequence-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#invalid-character</string>
          </dict>
        </array>
      </dict>
      <key>derived-type-component-parameter-specification</key>
      <dict>
        <key>comment</key>
        <string>Derived type parameter.</string>
        <key>match</key>
        <string>(?ix)\b(integer)\s*(,)\s*(kind|len)\s*(?:(::)\s*([a-z]\w*)?)?\s*(?=[;!\n])</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.integer.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.comma.fortran</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>keyword.other.attribute.derived-type.parameter.fortran</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.double-colon.fortran</string>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>entity.name.derived-type.parameter.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>derived-type-component-procedure-specification</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2003 standard.</string>
        <key>name</key>
        <string>meta.specification.procedure.fortran</string>
        <key>begin</key>
        <string>(?i)(?=\b(?:procedure)\b)</string>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#procedure-type</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Attribute list.</string>
            <key>contentName</key>
            <string>meta.attribute-list.derived-type-component-procedure.fortran</string>
            <key>begin</key>
            <string>(?=\s*(,|::|\())</string>
            <key>end</key>
            <string>(::)|(?=[;!\n])</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.double-colon.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(,)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.comma.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=::|[,;!\n])</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#access-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#pass-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#nopass-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#invalid-word</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#pointer-attribute</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#procedure-name-list</string>
          </dict>
        </array>
      </dict>
      <key>derived-type-component-type-specification</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1995 standard.</string>
        <key>name</key>
        <string>meta.specification.derived-type.fortran</string>
        <key>begin</key>
        <string>(?ix)(?=\b(?:character|class|complex|double\s*precision|double\s*complex|integer|logical|real|type)\b(?![^:'";!\n]*\bfunction\b))</string>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#types</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#line-continuation-operator</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Attribute list.</string>
            <key>contentName</key>
            <string>meta.attribute-list.derived-type-component-type.fortran</string>
            <key>begin</key>
            <string>(?=\s*(,|::))</string>
            <key>end</key>
            <string>(::)|(?=[;!\n])</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.double-colon.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(,)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.comma.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=::|[,;!\n])</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#access-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#allocatable-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#codimension-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#contiguous-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#dimension-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#pointer-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#invalid-word</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#name-list</string>
          </dict>
        </array>
      </dict>
      <key>derived-type-contains-attribute-specification</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1995 standard.</string>
        <key>name</key>
        <string>meta.statement.attribute-specification.fortran</string>
        <key>begin</key>
        <string>(?i)(?=\b(?:private)\b)</string>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#access-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#invalid-character</string>
          </dict>
        </array>
      </dict>
      <key>derived-type-contains-final-procedure-specification</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2003 standard.</string>
        <key>name</key>
        <string>meta.specification.procedure.final.fortran</string>
        <key>begin</key>
        <string>(?i)\b(final)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.final-procedure.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Attribute list.</string>
            <key>name</key>
            <string>meta.attribute-list.derived-type-contains-final-procedure.fortran</string>
            <key>begin</key>
            <string>(?=\s*(::))</string>
            <key>end</key>
            <string>(::)|(?=[;!\n])</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.double-colon.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#invalid-word</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#procedure-name</string>
          </dict>
        </array>
      </dict>
      <key>derived-type-contains-generic-procedure-specification</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2003 standard.</string>
        <key>name</key>
        <string>meta.specification.procedure.generic.fortran</string>
        <key>begin</key>
        <string>(?i)\b(generic)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.procedure.generic.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Attribute list.</string>
            <key>contentName</key>
            <string>meta.attribute-list.derived-type-contains-generic-procedure.fortran</string>
            <key>begin</key>
            <string>(?=\s*(,|::|\())</string>
            <key>end</key>
            <string>(::)|(?=[;!\n])</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.double-colon.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(,)|^|(?&lt;=&amp;)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.comma.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=::|[,&amp;;!\n])</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#access-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#invalid-word</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Name list.</string>
            <key>contentName</key>
            <string>meta.name-list.fortran</string>
            <key>begin</key>
            <string>(?=\s*[a-z])</string>
            <key>end</key>
            <string>(?=[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#IO-keywords</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#assignment-keyword</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#operator-keyword</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#procedure-name</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#pointer-operators</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>derived-type-contains-procedure-specification</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2003 standard.</string>
        <key>name</key>
        <string>meta.specification.procedure.fortran</string>
        <key>begin</key>
        <string>(?i)(?=\b(?:procedure)\b)</string>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#procedure-type</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Attribute list.</string>
            <key>contentName</key>
            <string>meta.attribute-list.derived-type-contains-procedure.fortran</string>
            <key>begin</key>
            <string>(?=\s*(,|::|\())</string>
            <key>end</key>
            <string>(::)|(?=[;!\n])</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.double-colon.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>meta.something.fortran</string>
                <key>begin</key>
                <string>(,)|^|(?&lt;=&amp;)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.comma.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=::|[,&amp;;!\n])</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#access-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#deferred-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#non-overridable-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#nopass-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#pass-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#invalid-word</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#procedure-name-list</string>
          </dict>
        </array>
      </dict>
      <key>enum-block-construct</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2003 standard.</string>
        <key>name</key>
        <string>meta.enum.fortran</string>
        <key>begin</key>
        <string>(?i)\b(enum)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.enum.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?i)\b(end\s*enum)\b</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.end-enum.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\G\s*(,)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.comma.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#language-binding-attribute</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#invalid-word</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.block.specification.enum.fortran</string>
            <key>begin</key>
            <string>(?i)(?!\s*\b(end\s*enum)\b)</string>
            <key>end</key>
            <string>(?i)(?=\b(end\s*enum)\b)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>name</key>
                <string>meta.statement.enumerator-specification.fortran</string>
                <key>begin</key>
                <string>(?ix)\b(enumerator)\b</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.enumerator.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=[;!\n])</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>comment</key>
                    <string>Attribute list.</string>
                    <key>contentName</key>
                    <string>meta.attribute-list.enum.fortran</string>
                    <key>begin</key>
                    <string>(?=\s*(,|::))</string>
                    <key>end</key>
                    <string>(::)|(?=[;!\n])</string>
                    <key>endCaptures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.double-colon.fortran</string>
                      </dict>
                    </dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#invalid-word</string>
                      </dict>
                    </array>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#comments</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#name-list</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>image-control-statement</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#sync-all-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#sync-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#event-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#form-team-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#fail-image-statement</string>
          </dict>
        </array>
      </dict>
      <key>sync-all-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2018 standard.</string>
        <key>name</key>
        <string>meta.statement.sync-all-memory.fortran</string>
        <key>begin</key>
        <string>(?i)\b(sync all|sync memory)(\s*(?=\())?</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.sync-all-memory.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.left.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;!\G)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.right.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parentheses-dummy-variables</string>
          </dict>
        </array>
      </dict>
      <key>sync-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2018 standard.</string>
        <key>name</key>
        <string>meta.statement.sync-images-team.fortran</string>
        <key>begin</key>
        <string>(?i)\b(sync images|sync team)\s*(?=\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.sync-images-team.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.left.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;!\G)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.right.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parentheses-dummy-variables</string>
          </dict>
        </array>
      </dict>
      <key>event-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2018 standard.</string>
        <key>name</key>
        <string>meta.statement.event.fortran</string>
        <key>begin</key>
        <string>(?i)\b(event post|event wait)\s*(?=\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.event.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.left.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;!\G)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.right.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parentheses-dummy-variables</string>
          </dict>
        </array>
      </dict>
      <key>form-team-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2018 standard.</string>
        <key>name</key>
        <string>meta.statement.form-team.fortran</string>
        <key>begin</key>
        <string>(?i)\b(form team)\s*(?=\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.form-team.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.left.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;!\G)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.right.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parentheses-dummy-variables</string>
          </dict>
        </array>
      </dict>
      <key>fail-image-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2018 standard.</string>
        <key>name</key>
        <string>meta.statement.fail-image.fortran</string>
        <key>match</key>
        <string>\b(fail image)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.fail-image.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>execution-statements</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#allocate-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#deallocate-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#IO-statements</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#nullify-statement</string>
          </dict>
        </array>
      </dict>
      <key>allocate-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>name</key>
        <string>meta.statement.allocate.fortran</string>
        <key>begin</key>
        <string>(?i)\b(allocate)\s*(?=\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.allocate.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.left.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;!\G)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.right.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parentheses-dummy-variables</string>
          </dict>
        </array>
      </dict>
      <key>deallocate-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>name</key>
        <string>meta.statement.deallocate.fortran</string>
        <key>begin</key>
        <string>(?i)\b(deallocate)\s*(?=\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.deallocate.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.left.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;!\G)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.right.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parentheses-dummy-variables</string>
          </dict>
        </array>
      </dict>
      <key>IO-statements</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Introduced in the Fortran 1977 standard.</string>
            <key>name</key>
            <string>meta.statement.IO.fortran</string>
            <key>begin</key>
            <string>(?ix)\b(?:(backspace)|(close)|(endfile)|(format)|(inquire)|(open)|(read)|(rewind)|(write))\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.backspace.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.close.fortran</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.control.endfile.fortran</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>keyword.control.format.fortran</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>keyword.control.inquire.fortran</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>keyword.control.open.fortran</string>
              </dict>
              <key>7</key>
              <dict>
                <key>name</key>
                <string>keyword.control.read.fortran</string>
              </dict>
              <key>8</key>
              <dict>
                <key>name</key>
                <string>keyword.control.rewind.fortran</string>
              </dict>
              <key>9</key>
              <dict>
                <key>name</key>
                <string>keyword.control.write.fortran</string>
              </dict>
              <key>10</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[;!\n])</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#IO-item-list</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Introduced in the Fortran 1977 standard.</string>
            <key>match</key>
            <string>(?i)\b(?:(backspace)|(endfile)|(format)|(print)|(read)|(rewind))\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.backspace.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.endfile.fortran</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.control.format.fortran</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>keyword.control.print.fortran</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>keyword.control.read.fortran</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>keyword.control.rewind.fortran</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>comment</key>
            <string>Introduced in the Fortran 2003 standard.</string>
            <key>begin</key>
            <string>(?i)\b(?:(flush)|(wait))\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.flush.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.wait.fortran</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Introduced in the Fortran 2003 standard.</string>
            <key>match</key>
            <string>(?i)\b(flush)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.flush.fortran</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>nullify-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>name</key>
        <string>meta.statement.nullify.fortran</string>
        <key>begin</key>
        <string>(?i)\b(nullify)\s*(?=\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.nullify.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.left.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;!\G)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.right.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parentheses-dummy-variables</string>
          </dict>
        </array>
      </dict>
      <key>include-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>name</key>
        <string>meta.statement.include.fortran</string>
        <key>begin</key>
        <string>(?i)\b(include)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.include.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string-constant</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#invalid-character</string>
          </dict>
        </array>
      </dict>
      <key>import-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>name</key>
        <string>meta.statement.include.fortran</string>
        <key>begin</key>
        <string>(?i)\b(import)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.include.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?i)\G\s*(?:(::)|(?=[a-z]))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.double-colon.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#name-list</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\G\s*(,)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.comma.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>(?i)\G\s*\b(all)\b</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.all.fortran</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>(?i)\G\s*\b(none)\b</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.none.fortran</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>begin</key>
                <string>(?i)\G\s*\b(only)\s*(:)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.only.fortran</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.colon.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=[;!\n])</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#name-list</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#invalid-word</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>interface-block-constructs</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#abstract-interface-block-construct</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#explicit-interface-block-construct</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#generic-interface-block-construct</string>
          </dict>
        </array>
      </dict>
      <key>abstract-interface-block-construct</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2003 standard.</string>
        <key>name</key>
        <string>meta.interface.abstract.fortran</string>
        <key>begin</key>
        <string>(?i)\b(abstract)\s+(interface)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.attribute.fortran.modern</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.control.interface.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?i)\b(end\s*interface)\b</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.endinterface.fortran.modern</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>explicit-interface-block-construct</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>name</key>
        <string>meta.interface.explicit.fortran</string>
        <key>begin</key>
        <string>(?i)\b(interface)\b(?=\s*[;!\n])</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.interface.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?i)\b(end\s*interface)\b</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.endinterface.fortran.modern</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>generic-interface-block-construct</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>name</key>
        <string>meta.interface.generic.fortran</string>
        <key>begin</key>
        <string>(?i)\b(interface)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.interface.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Assignment generic interface.</string>
            <key>begin</key>
            <string>(?ix)\G\s*\b(assignment)\s* (\()\s*(?:(\=)|(\S.*))\s*(\))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.assignment.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.assignment.fortran</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>invalid.error.generic-interface.fortran</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?ix)\b(end\s*interface)\b (?:\s*\b(\1)\b\s*(\()\s*(?:(\3)|(\S.*))\s*(\)))?</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.endinterface.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.other.assignment.fortran</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.assignment.fortran</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>invalid.error.generic-interface-end.fortran</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#interface-procedure-statement</string>
              </dict>
              <dict>
                <key>include</key>
                <string>$base</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Operator generic interface.</string>
            <key>begin</key>
            <string>(?ix)\G\s*\b(operator)\s* (\()\s*(?: (\.[a-z]+\.|\=\=|\/\=|\&gt;\=|\&gt;|\&lt;|\&lt;\=|\-|\+|\/|\/\/|\*\*|\*) |(\S.*) )\s*(\))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.operator.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.fortran</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>invalid.error.generic-interface-block-op.fortran</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?ix)\b(end\s*interface)\b (?:\s*\b(\1)\b\s*(\()\s*(?:(\3)|(\S.*))\s*(\)))?</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.endinterface.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.other.operator.fortran</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.fortran</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>invalid.error.generic-interface-block-op-end.fortran</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#interface-procedure-statement</string>
              </dict>
              <dict>
                <key>include</key>
                <string>$base</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Read/Write generic interface.</string>
            <key>begin</key>
            <string>(?ix)\G\s*\b(?:(read)|(write))\s* (\()\s*(?:(formatted)|(unformatted)|(\S.*))\s*(\))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.read.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.other.write.fortran</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>keyword.other.formatted.fortran</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>keyword.other.unformatted.fortran</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>invalid.error.generic-interface-block.fortran</string>
              </dict>
              <key>7</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?ix)\b(end\s*interface)\b(?:\s*\b(?:(\2)|(\3))\b\s* (\()\s*(?:(\4)|(\5)|(\S.*))\s*(\)))?</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.endinterface.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.other.read.fortran</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.other.write.fortran</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>keyword.other.formatted.fortran</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>keyword.other.unformatted.fortran</string>
              </dict>
              <key>7</key>
              <dict>
                <key>name</key>
                <string>invalid.error.generic-interface-block-end.fortran</string>
              </dict>
              <key>8</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#interface-procedure-statement</string>
              </dict>
              <dict>
                <key>include</key>
                <string>$base</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Generic interface.</string>
            <key>begin</key>
            <string>(?i)\G\s*\b([a-z]\w*)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?i)\b(end\s*interface)\b(?:\s*\b(\1)\b)?</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.endinterface.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#interface-procedure-statement</string>
              </dict>
              <dict>
                <key>include</key>
                <string>$base</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>interface-procedure-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>name</key>
        <string>meta.statement.procedure.fortran</string>
        <key>begin</key>
        <string>(?i)(?=[^'";!\n]*\bprocedure\b)</string>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Attribute list.</string>
            <key>name</key>
            <string>meta.attribute-list.interface.fortran</string>
            <key>begin</key>
            <string>(?i)(?=\G\s*(?!\bprocedure\b))</string>
            <key>end</key>
            <string>(?i)(?=\bprocedure\b)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#module-attribute</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#invalid-word</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Procedure statement.</string>
            <key>begin</key>
            <string>(?i)\s*\b(procedure)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.procedure.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>\G\s*(::)</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.operator.double-colon.fortran</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>include</key>
                <string>#procedure-name-list</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>intrinsic-functions</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Intrinsic functions introduced in the Fortran 2008 standard.</string>
            <key>begin</key>
            <string>(?ix)\b(acosh|asinh|atanh|bge|bgt|ble|blt|dshiftl|dshiftr| findloc|hypot|iall|iany|image_index|iparity|is_contiguous|lcobound| leadz|mask[lr]|merge_bits|norm2|num_images|parity|popcnt|poppar| shift[alr]|storage_size|this_image|trailz|ucobound)\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.function.intrinsic.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Functions accessable through the intrinsic FORTRAN_SPECIAL_FUNCTIONS module. Introduced in the Fortran 2008 standard.</string>
            <key>begin</key>
            <string>(?ix)\b(bessel_[jy][01n]|erf(c(_scaled)?)?|gamma|log_gamma)\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.function.intrinsic.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Intrinsic functions introduced in the Fortran 2003 standard.</string>
            <key>begin</key>
            <string>(?ix)\b(command_argument_count|extends_type_of|is_iostat_end| is_iostat_eor|new_line|same_type_as|selected_char_kind)\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.function.intrinsic.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Functions accessable through the intrinsic IEEE_ARITHMETIC module. Introduced in the Fortran 2003 standard.</string>
            <key>begin</key>
            <string>(?ix)\b(ieee_( class|copy_sign|is_(finite|nan|negative|normal)|logb|next_after|rem| rint|scalb|selected_real_kind| support_(datatype|denormal|divide|inf|io|nan|rounding|sqrt|standard|underflow_control)| unordered|value))\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.function.intrinsic.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Functions accessable through the intrinsic IEEE_EXCEPTIONS module. Introduced in the Fortran 2003 standard.</string>
            <key>begin</key>
            <string>(?ix)\b(ieee_support_(flag|halting))\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.function.intrinsic.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Functions accessable through the intrinsic ISO_C_BINDING module. Introduced in the Fortran 2003 standard.</string>
            <key>begin</key>
            <string>(?ix)\b(c_(associated|funloc|loc|sizeof))\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.function.intrinsic.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Functions accessable through the intrinsic ISO_FORTRAN_ENV module. Introduced in the Fortran 2003 standard.</string>
            <key>begin</key>
            <string>(?ix)\b(compiler_(options|version))\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.function.intrinsic.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Intrinsic functions introduced in the Fortran 1995 standard.</string>
            <key>begin</key>
            <string>(?ix)\b(null)\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.function.intrinsic.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Intrinsic functions introduced in the Fortran 1990 standard.</string>
            <key>begin</key>
            <string>(?ix)\b(achar|adjustl|adjustr|all|allocated|associated|any|bit_size|btest|ceiling|count|cshift|digits|dot_product|eoshift|epsilon|exponent|floor|fraction|huge|iachar|iand|ibclr|ibits|ibset|ieor|ior|ishftc?| kind|lbound|len_trim|logical|matmul|maxexponent|maxloc|maxval|merge|minexponent|minloc|minval|modulo|nearest|not|pack|precision|present|product|radix|range|repeat|reshape|rrspacing|scale|scan|selected_(int|real)_kind|set_exponent|shape|size|spacing|spread|sum|tiny|transfer|transpose|trim|ubound|unpack|verify)\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.function.intrinsic.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Intrinsic functions introduced in the Fortran 1977 standard.</string>
            <key>begin</key>
            <string>(?ix)\b([icd]?abs|acos|[ad]int|[ad]nint|aimag|amax[01]| amin[01]|d?asin|d?atan|d?atan2|char|conjg|[cd]?cos|d?cosh|cmplx|dble| i?dim|dmax1|dmin1|dprod|[cd]?exp|float|ichar|idint|ifix|index|int|len| lge|lgt|lle|llt|[acd]?log|[ad]?log10|max[01]?|min[01]?|[ad]?mod| (id)?nint|real|[di]?sign|[cd]?sin|d?sinh|sngl|[cd]?sqrt|d?tan|d?tanh) \s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.function.intrinsic.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>intrinsic-subroutines</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Intrinsic subroutines introduced in the Fortran 1990 standard.</string>
            <key>begin</key>
            <string>(?ix)\G\s*\b(date_and_time|mvbits|random_number|random_seed| system_clock)\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.subroutine.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Intrinsic subroutines introduced in the Fortran 1995 standard.</string>
            <key>begin</key>
            <string>(?i)\G\s*\b(cpu_time)\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.subroutine.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Subroutines accessable through the intrinsic IEEE_ARITHMETIC module. Introduced in the Fortran 2003 standard.</string>
            <key>begin</key>
            <string>(?i)\G\s*\b(ieee_(get|set)_(rounding|underflow)_mode)\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.subroutine.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Subroutines accessable through the intrinsic IEEE_EXCEPTIONS module. Introduced in the Fortran 2003 standard.</string>
            <key>begin</key>
            <string>(?i)\G\s*\b(ieee_(get|set)_(flag|halting_mode|status))\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.subroutine.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Subroutines accessable through the intrinsic ISO_C_BINDING module. Introduced in the Fortran 2003 standard.</string>
            <key>begin</key>
            <string>(?i)\G\s*\b(c_f_(pointer|procpointer))\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.subroutine.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Intrinsic subroutines introduced in the Fortran 2008 standard.</string>
            <key>begin</key>
            <string>(?ix)\G\s*\b(execute_command_line|get_command| get_command_argument|get_environment_variable|move_alloc)\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.subroutine.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>operators</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#arithmetic-operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#assignment-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#derived-type-operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#logical-operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#pointer-operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string-operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#user-defined-operators</string>
          </dict>
        </array>
      </dict>
      <key>arithmetic-operators</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1977 standard.</string>
        <key>match</key>
        <string>(\-)|(\+)|\/(?!\/|\=|\\)|(\*\*)|(\*)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.subtraction.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.addition.fortran</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.division.fortran</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.power.fortran</string>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.multiplication.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>assignment-operator</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1977 standard.</string>
        <key>name</key>
        <string>keyword.operator.assignment.fortran</string>
        <key>match</key>
        <string>(?&lt;!\/|\=|\&lt;|\&gt;)(\=)(?!\=|\&gt;)</string>
      </dict>
      <key>derived-type-operators</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1995 standard.</string>
        <key>match</key>
        <string>\s*(\%)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.selector.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>line-continuation-operator</key>
      <dict>
        <key>comment</key>
        <string>Operator that allows a line to be continued on the next line.</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?:^|(?&lt;=;))\s*(&amp;)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.line-continuation.fortran</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>contentName</key>
            <string>meta.line-continuation.fortran</string>
            <key>begin</key>
            <string>\s*(&amp;)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.line-continuation.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?i)^(?:\s*(&amp;))?</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.line-continuation.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>name</key>
                <string>invalid.error.line-cont.fortran</string>
                <key>match</key>
                <string>\S[^!]*</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>logical-operators</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Introduced in the Fortran 1977 standard.</string>
            <key>match</key>
            <string>(?ix)(\s*\.(and|eq|eqv|le|lt|ge|gt|ne|neqv|not|or)\.)</string>
            <key>name</key>
            <string>keyword.logical.fortran</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Introduced in the Fortran 1990 standard.</string>
            <key>name</key>
            <string>keyword.logical.fortran.modern</string>
            <key>match</key>
            <string>(\=\=|\/\=|\&gt;\=|(?&lt;!\=)\&gt;|\&lt;\=|\&lt;)</string>
          </dict>
        </array>
      </dict>
      <key>pointer-operators</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>name</key>
        <string>keyword.other.point.fortran</string>
        <key>match</key>
        <string>(\=\&gt;)</string>
      </dict>
      <key>string-operators</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 19?? standard.</string>
        <key>name</key>
        <string>keyword.other.concatination.fortran</string>
        <key>match</key>
        <string>(\/\/)</string>
      </dict>
      <key>string-line-continuation-operator</key>
      <dict>
        <key>comment</key>
        <string>Operator that allows a line to be continued on the next line.</string>
        <key>begin</key>
        <string>(&amp;)(?=\s*\n)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.line-continuation.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?i)^(?:(?=\s*[^\s!&amp;])|\s*(&amp;))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.line-continuation.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>name</key>
            <string>invalid.error.string-line-cont.fortran</string>
            <key>match</key>
            <string>\S.*</string>
          </dict>
        </array>
      </dict>
      <key>user-defined-operators</key>
      <dict>
        <key>match</key>
        <string>(?i)\s*(\.[a-z]+\.)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.user-defined.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>block-data-definition</key>
      <dict>
        <key>name</key>
        <string>meta.block-data.fortran</string>
        <key>begin</key>
        <string>(?i)\b(block\s*data)\b(?:\s+([a-z]\w*)\b)?</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.block-data.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.block-data.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?ix)\b(?:(end\s*block\s*data)(?:\s+(\2))?|(end))\b (?:\s*(\S((?!\n).)*))?</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.end-block-data.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.block-data.fortran</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>keyword.control.end-block-data.fortran</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>invalid.error.block-data-definition.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>function-definition</key>
      <dict>
        <key>comment</key>
        <string>Function program unit. Introduced in the Fortran 1977 standard.</string>
        <key>name</key>
        <string>meta.function.fortran</string>
        <key>begin</key>
        <string>(?i)(?=([^:'";!\n](?!\bend)(?!\bsubroutine\b))*\bfunction\b)</string>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Function attribute list.</string>
            <key>name</key>
            <string>meta.attribute-list.function.fortran</string>
            <key>begin</key>
            <string>(?i)(?=\G\s*(?!\bfunction\b))</string>
            <key>end</key>
            <string>(?i)(?=\bfunction\b)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#elemental-attribute</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#module-attribute</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#pure-attribute</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#recursive-attribute</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#types</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#invalid-word</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Captures the function keyword</string>
            <key>begin</key>
            <string>(?i)\b(function)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.function.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>comment</key>
                <string>Function body.</string>
                <key>begin</key>
                <string>(?i)\G\s*\b([a-z]\w*)\b</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>entity.name.function.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?ix)\s*\b(?:(end\s*function)(?:\s+([a-z_]\w*))?|(end))\b \s*([^;!\n]+)?(?=[;!\n])</string>
                <key>endCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.endfunction.fortran</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>entity.name.function.fortran</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.endfunction.fortran</string>
                  </dict>
                  <key>4</key>
                  <dict>
                    <key>name</key>
                    <string>invalid.error.function.fortran</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>comment</key>
                    <string>Rest of the first line in function construct.</string>
                    <key>name</key>
                    <string>meta.function.first-line.fortran</string>
                    <key>begin</key>
                    <string>\G(?!\s*[;!\n])</string>
                    <key>end</key>
                    <string>(?=[;!\n])</string>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#dummy-variable-list</string>
                      </dict>
                      <dict>
                        <key>include</key>
                        <string>#result-statement</string>
                      </dict>
                      <dict>
                        <key>include</key>
                        <string>#language-binding-attribute</string>
                      </dict>
                    </array>
                  </dict>
                  <dict>
                    <key>comment</key>
                    <string>Specification and execution block.</string>
                    <key>name</key>
                    <string>meta.block.specification.function.fortran</string>
                    <key>begin</key>
                    <string>(?i)(?!\b(?:end\s*[;!\n]|end\s*function\b))</string>
                    <key>end</key>
                    <string>(?i)(?=\b(?:end\s*[;!\n]|end\s*function\b))</string>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>comment</key>
                        <string>Contains block.</string>
                        <key>name</key>
                        <string>meta.block.contains.fortran</string>
                        <key>begin</key>
                        <string>(?i)\b(contains)\b</string>
                        <key>beginCaptures</key>
                        <dict>
                          <key>1</key>
                          <dict>
                            <key>name</key>
                            <string>keyword.control.contains.fortran</string>
                          </dict>
                        </dict>
                        <key>end</key>
                        <string>(?i)(?=(?:end\s*[;!\n]|end\s*function\b))</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>include</key>
                            <string>$base</string>
                          </dict>
                        </array>
                      </dict>
                      <dict>
                        <key>include</key>
                        <string>$base</string>
                      </dict>
                    </array>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>module-definition</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>name</key>
        <string>meta.module.fortran</string>
        <key>begin</key>
        <string>(?ix)(?=\b(module)\b)(?![^'";!\n]* \b(?:function|procedure|subroutine)\b)</string>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?i)\G\s*\b(module)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.program.fortran</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>comment</key>
            <string>Module body.</string>
            <key>begin</key>
            <string>(?i)\s*\b([a-z]\w*)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.class.module.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?ix)\b(?:(end\s*module)(?:\s+([a-z_]\w*))?|(end))\b \s*([^;!\n]+)?(?=[;!\n])</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.endmodule.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.class.module.fortran</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.other.endmodule.fortran</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>invalid.error.module-definition.fortran</string>
              </dict>
            </dict>
            <key>applyEndPatternLast</key>
            <integer>1</integer>
            <key>patterns</key>
            <array>
              <dict>
                <key>comment</key>
                <string>Module specification block.</string>
                <key>name</key>
                <string>meta.block.specification.module.fortran</string>
                <key>begin</key>
                <string>\G</string>
                <key>end</key>
                <string>(?i)(?=\b(?:end\s*[;!\n]|end\s*module\b))</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>comment</key>
                    <string>Module contains block.</string>
                    <key>name</key>
                    <string>meta.block.contains.fortran</string>
                    <key>begin</key>
                    <string>(?i)\b(contains)\b</string>
                    <key>beginCaptures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.control.contains.fortran</string>
                      </dict>
                    </dict>
                    <key>end</key>
                    <string>(?i)(?=\s*(?:end\s*[;!\n]|end\s*module\b))</string>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>$base</string>
                      </dict>
                    </array>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>$base</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>program-definition</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1977 standard.</string>
        <key>name</key>
        <string>meta.program.fortran</string>
        <key>begin</key>
        <string>(?i)(?=\b(program)\b)</string>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?i)\G\s*\b(program)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.program.fortran</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>comment</key>
            <string>Program body.</string>
            <key>begin</key>
            <string>(?i)\s*\b([a-z]\w*)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.program.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?ix)\b(?:(end\s*program)(?:\s+([a-z_]\w*))?|(end))\b\s*([^;!\n]+)?(?=[;!\n])</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.endprogram.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.program.fortran</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.control.endprogram.fortran</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>invalid.error.program-definition.fortran</string>
              </dict>
            </dict>
            <key>applyEndPatternLast</key>
            <integer>1</integer>
            <key>patterns</key>
            <array>
              <dict>
                <key>comment</key>
                <string>Program specification block.</string>
                <key>name</key>
                <string>meta.block.specification.program.fortran</string>
                <key>begin</key>
                <string>\G</string>
                <key>end</key>
                <string>(?i)(?=\b(?:end\s*[;!\n]|end\s*program\b))</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>comment</key>
                    <string>Program contains block.</string>
                    <key>name</key>
                    <string>meta.block.contains.fortran</string>
                    <key>begin</key>
                    <string>(?i)\b(contains)\b</string>
                    <key>beginCaptures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.control.contains.fortran</string>
                      </dict>
                    </dict>
                    <key>end</key>
                    <string>(?i)(?=(?:end\s*[;!\n]|end\s*program\b))</string>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>$base</string>
                      </dict>
                    </array>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>$base</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>procedure-definition</key>
      <dict>
        <key>comment</key>
        <string>Procedure program unit. Introduced in the Fortran 2008 standard.</string>
        <key>name</key>
        <string>meta.procedure.fortran</string>
        <key>begin</key>
        <string>(?i)(?=[^'";!\n]*\bmodule\s+procedure\b)</string>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?i)\s*\b(module\s+procedure)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.procedure.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>comment</key>
                <string>Procedure body.</string>
                <key>begin</key>
                <string>(?i)\G\s*\b([a-z]\w*)\b</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>entity.name.function.procedure.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?ix)\s*\b(?:(end\s*procedure)(?:\s+([a-z_]\w*))?|(end))\b \s*([^;!\n]+)?(?=[;!\n])</string>
                <key>endCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.endprocedure.fortran</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>entity.name.function.procedure.fortran</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.endprocedure.fortran</string>
                  </dict>
                  <key>4</key>
                  <dict>
                    <key>name</key>
                    <string>invalid.error.procedure-definition.fortran</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>comment</key>
                    <string>Rest of the first line in procedure construct - should be empty.</string>
                    <key>name</key>
                    <string>meta.first-line.fortran</string>
                    <key>begin</key>
                    <string>\G(?!\s*[;!\n])</string>
                    <key>end</key>
                    <string>(?=[;!\n])</string>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#invalid-character</string>
                      </dict>
                    </array>
                  </dict>
                  <dict>
                    <key>comment</key>
                    <string>Specification and execution block.</string>
                    <key>name</key>
                    <string>meta.block.specification.procedure.fortran</string>
                    <key>begin</key>
                    <string>(?i)(?!\s*(?:contains\b|end\s*[;!\n]|end\s*procedure\b))</string>
                    <key>end</key>
                    <string>(?i)(?=\s*(?:contains\b|end\s*[;!\n]|end\s*procedure\b))</string>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>$self</string>
                      </dict>
                    </array>
                  </dict>
                  <dict>
                    <key>comment</key>
                    <string>Contains block.</string>
                    <key>name</key>
                    <string>meta.block.contains.fortran</string>
                    <key>begin</key>
                    <string>(?i)\s*(contains)\b</string>
                    <key>beginCaptures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.control.contains.fortran</string>
                      </dict>
                    </dict>
                    <key>end</key>
                    <string>(?i)(?=\s*(?:end\s*[;!\n]|end\s*procedure\b))</string>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>$self</string>
                      </dict>
                    </array>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>subroutine-definition</key>
      <dict>
        <key>comment</key>
        <string>Subroutine program unit. Introduced in the Fortran 1977 standard.</string>
        <key>name</key>
        <string>meta.subroutine.fortran</string>
        <key>begin</key>
        <string>(?i)(?=([^:'";!\n](?!\bend))*\bsubroutine\b)</string>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Attribute list.</string>
            <key>name</key>
            <string>meta.attribute-list.subroutine.fortran</string>
            <key>begin</key>
            <string>(?i)(?=\G\s*(?!\bsubroutine\b))</string>
            <key>end</key>
            <string>(?i)(?=\bsubroutine\b)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#elemental-attribute</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#module-attribute</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#pure-attribute</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#recursive-attribute</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#invalid-word</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\s*\b(subroutine)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.subroutine.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>comment</key>
                <string>Subroutine body.</string>
                <key>begin</key>
                <string>(?i)\G\s*\b([a-z]\w*)\b</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>entity.name.function.subroutine.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?ix)\b(?:(end\s*subroutine)(?:\s+([a-z_]\w*))?|(end))\b \s*([^;!\n]+)?(?=[;!\n])</string>
                <key>endCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.endsubroutine.fortran</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>entity.name.function.subroutine.fortran</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.endsubroutine.fortran</string>
                  </dict>
                  <key>4</key>
                  <dict>
                    <key>name</key>
                    <string>invalid.error.subroutine.fortran</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>comment</key>
                    <string>Rest of the first line in subroutine construct.</string>
                    <key>name</key>
                    <string>meta.first-line.fortran</string>
                    <key>begin</key>
                    <string>\G(?!\s*[;!\n])</string>
                    <key>end</key>
                    <string>(?=[;!\n])</string>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#dummy-variable-list</string>
                      </dict>
                      <dict>
                        <key>include</key>
                        <string>#language-binding-attribute</string>
                      </dict>
                    </array>
                  </dict>
                  <dict>
                    <key>comment</key>
                    <string>Specification and execution block.</string>
                    <key>name</key>
                    <string>meta.block.specification.subroutine.fortran</string>
                    <key>begin</key>
                    <string>(?i)(?!\b(?:end\s*[;!\n]|end\s*subroutine\b))</string>
                    <key>end</key>
                    <string>(?i)(?=\b(?:end\s*[;!\n]|end\s*subroutine\b))</string>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>comment</key>
                        <string>Contains block.</string>
                        <key>name</key>
                        <string>meta.block.contains.fortran</string>
                        <key>begin</key>
                        <string>(?i)\b(contains)\b</string>
                        <key>beginCaptures</key>
                        <dict>
                          <key>1</key>
                          <dict>
                            <key>name</key>
                            <string>keyword.control.contains.fortran</string>
                          </dict>
                        </dict>
                        <key>end</key>
                        <string>(?i)(?=(?:end\s*[;!\n]|end\s*subroutine\b))</string>
                        <key>patterns</key>
                        <array>
                          <dict>
                            <key>include</key>
                            <string>$base</string>
                          </dict>
                        </array>
                      </dict>
                      <dict>
                        <key>include</key>
                        <string>$base</string>
                      </dict>
                    </array>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>submodule-definition</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2008 standard.</string>
        <key>name</key>
        <string>meta.submodule.fortran</string>
        <key>begin</key>
        <string>(?i)(?=\b(submodule)\s*\()</string>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?i)\G\s*\b(submodule)\s*(\()\s*(\w+)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.submodule.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.name.class.submodule.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array/>
          </dict>
          <dict>
            <key>comment</key>
            <string>Submodule body.</string>
            <key>begin</key>
            <string>(?i)\s*\b([a-z]\w*)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.module.submodule.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?ix)\s*\b(?:(end\s*submodule)(?:\s+([a-z_]\w*))?|(end))\b \s*([^;!\n]+)?(?=[;!\n])</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.endsubmodule.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.module.submodule.fortran</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.other.endsubmodule.fortran</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>invalid.error.submodule.fortran</string>
              </dict>
            </dict>
            <key>applyEndPatternLast</key>
            <integer>1</integer>
            <key>patterns</key>
            <array>
              <dict>
                <key>comment</key>
                <string>Submodule specification block.</string>
                <key>name</key>
                <string>meta.block.specification.submodule.fortran</string>
                <key>begin</key>
                <string>\G</string>
                <key>end</key>
                <string>(?i)(?=\b(?:end\s*[;!\n]|end\s*submodule\b))</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>comment</key>
                    <string>Submodule contains block.</string>
                    <key>name</key>
                    <string>meta.block.contains.fortran</string>
                    <key>begin</key>
                    <string>(?i)\b(contains)\b</string>
                    <key>beginCaptures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.control.contains.fortran</string>
                      </dict>
                    </dict>
                    <key>end</key>
                    <string>(?i)(?=\s*(?:end\s*[;!\n]|end\s*submodule\b))</string>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>$base</string>
                      </dict>
                    </array>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>$base</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>type-specification-statements</key>
      <dict>
        <key>name</key>
        <string>meta.specification.type.fortran</string>
        <key>comment</key>
        <string>Supported types for function and escape :: if function is used as a variable name (which is bad practice).</string>
        <key>begin</key>
        <string>(?ix)(?=\b(?:character|class|complex|double\s*precision|double\s*complex|integer|logical|real|type|dimension)\b(?![^'";!\n:]*\bfunction\b))</string>
        <key>end</key>
        <string>(?=[\);!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#types</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Attribute list.</string>
            <key>contentName</key>
            <string>meta.attribute-list.type-specification-statements.fortran</string>
            <key>begin</key>
            <string>(?=\s*(,|::))</string>
            <key>end</key>
            <string>(::)|(?=[;!\n])</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.double-colon.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(,)|^|(?&lt;=&amp;)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.comma.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=::|[,&amp;;!\n])</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#access-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#allocatable-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#asynchronous-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#codimension-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#contiguous-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#dimension-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#external-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#intent-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#intrinsic-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#language-binding-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#optional-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#parameter-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#pointer-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#protected-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#save-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#target-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#value-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#volatile-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#invalid-word</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#name-list</string>
          </dict>
        </array>
      </dict>
      <key>procedure-specification-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 2003 standard.</string>
        <key>name</key>
        <string>meta.specification.procedure.fortran</string>
        <key>begin</key>
        <string>(?i)(?=\b(?:procedure)\b)</string>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#procedure-type</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Attribute list.</string>
            <key>contentName</key>
            <string>meta.attribute-list.procedure.fortran</string>
            <key>begin</key>
            <string>(?=\s*(,|::|\())</string>
            <key>end</key>
            <string>(::)|(?=[;!\n])</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.double-colon.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(,)|^|(?&lt;=&amp;)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.comma.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=::|[,&amp;;!\n])</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#access-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#intent-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#optional-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#pointer-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#protected-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#save-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#invalid-word</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#procedure-name-list</string>
          </dict>
        </array>
      </dict>
      <key>specification-statements</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#attribute-specification-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#common-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#data-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#equivalence-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#implicit-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#namelist-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#use-statement</string>
          </dict>
        </array>
      </dict>
      <key>attribute-specification-statement</key>
      <dict>
        <key>name</key>
        <string>meta.statement.attribute-specification.fortran</string>
        <key>begin</key>
        <string>(?ix)(?=\b(?:allocatable|asynchronous|contiguous |external|intrinsic|optional|parameter|pointer|private|protected|public|save|target|value|volatile)\b |(bind|dimension|intent)\s*\( |(codimension)\s*\[)</string>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#access-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#allocatable-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#asynchronous-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#codimension-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#contiguous-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#dimension-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#external-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#intent-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#intrinsic-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#language-binding-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#optional-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parameter-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#pointer-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#protected-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#save-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#target-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#value-attribute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#volatile-attribute</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Attribute list.</string>
            <key>contentName</key>
            <string>meta.attribute-list.normal.fortran</string>
            <key>begin</key>
            <string>(?=\s*::)</string>
            <key>end</key>
            <string>(::)|(?=[;!\n])</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.double-colon.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#invalid-word</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#name-list</string>
          </dict>
        </array>
      </dict>
      <key>common-statement</key>
      <dict>
        <key>begin</key>
        <string>(?i)\b(common)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.common.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>data-statement</key>
      <dict>
        <key>begin</key>
        <string>(?i)\b(data)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.data.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>equivalence-statement</key>
      <dict>
        <key>begin</key>
        <string>(?i)\b(equivalence)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.common.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?:\G|(,))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>puntuation.comma.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[,;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>implicit-statement</key>
      <dict>
        <key>name</key>
        <string>meta.statement.implicit.fortran</string>
        <key>begin</key>
        <string>(?i)\b(implicit)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.implicit.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?i)\s*\b(none)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.none.fortran</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>namelist-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>begin</key>
        <string>(?i)\b(namelist)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.namelist.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <key>use-statement</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1990 standard.</string>
        <key>name</key>
        <string>meta.statement.use.fortran</string>
        <key>begin</key>
        <string>(?i)\b(use)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.use.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Attribute list.</string>
            <key>contentName</key>
            <string>meta.attribute-list.namelist.fortran</string>
            <key>begin</key>
            <string>(?=\s*(,|::|\())</string>
            <key>end</key>
            <string>(::)|(?=[;!\n])</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.double-colon.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(,)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.comma.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=::|[,;!\n])</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#intrinsic-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#non-intrinsic-attribute</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#invalid-word</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\s*\b([a-z]\w*)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.class.module.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[;!\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(,)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.comma.fortran</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=::|[;!\n])</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>begin</key>
                    <string>(?i)\s*\b(only\s*:)</string>
                    <key>beginCaptures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>keyword.control.only.fortran</string>
                      </dict>
                    </dict>
                    <key>end</key>
                    <string>(?=[;!\n])</string>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#operator-keyword</string>
                      </dict>
                      <dict>
                        <key>include</key>
                        <string>$base</string>
                      </dict>
                    </array>
                  </dict>
                  <dict>
                    <key>contentName</key>
                    <string>meta.name-list.fortran</string>
                    <key>begin</key>
                    <string>(?i)(?=\s*[a-z])</string>
                    <key>end</key>
                    <string>(?=[;!\n])</string>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#operator-keyword</string>
                      </dict>
                      <dict>
                        <key>include</key>
                        <string>$base</string>
                      </dict>
                    </array>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>types</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#character-type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#derived-type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#logical-type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#numeric-type</string>
          </dict>
        </array>
      </dict>
      <key>character-type</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1977 standard.</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?i)\b(character)\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.character.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>contentName</key>
            <string>meta.type-spec.fortran</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>(?i)\b(character)\b(?:\s*(\*)\s*(\d*))?</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.character.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.multiplication.fortran</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.fortran</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>derived-type</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1995 standard.</string>
        <key>name</key>
        <string>meta.specification.type.derived.fortran</string>
        <key>begin</key>
        <string>(?i)\b(?:(class)|(type))\s*(\()\s*(([a-z]\w*)|\*)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.class.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.type.type.fortran</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.left.fortran</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.right.fortran</string>
          </dict>
        </dict>
        <key>contentName</key>
        <string>meta.type-spec.fortran</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parentheses-dummy-variables</string>
          </dict>
        </array>
      </dict>
      <key>logical-type</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1977 standard.</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?i)\b(logical)\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.logical.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>contentName</key>
            <string>meta.type-spec.fortran</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>(?i)\b(logical)\b(?:\s*(\*)\s*(\d*))?</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.character.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.multiplication.fortran</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.fortran</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>numeric-type</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran 1977 standard.</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?i)\b(?:(complex)|(double\s*precision)|(double\s*complex)|(integer)|(real))\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.complex.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.type.double.fortran</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>storage.type.doublecomplex.fortran</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>storage.type.integer.fortran</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>storage.type.real.fortran</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!\G)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>contentName</key>
            <string>meta.type-spec.fortran</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parentheses-dummy-variables</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>(?ix)\b(?:(complex)|(double\s*precision)|(double\s*complex)|(integer)|(real)|(dimension))\b(?:\s*(\*)\s*(\d*))?</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.complex.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.type.double.fortran</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>storage.type.doublecomplex.fortran</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>storage.type.integer.fortran</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>storage.type.real.fortran</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>storage.type.dimension.fortran</string>
              </dict>
              <key>7</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.multiplication.fortran</string>
              </dict>
              <key>8</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.fortran</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>procedure-type</key>
      <dict>
        <key>comment</key>
        <string>Introduced in the Fortran ???? standard.</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?i)\b(procedure)\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.procedure.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.fortran</string>
              </dict>
            </dict>
            <key>contentName</key>
            <string>meta.type-spec.fortran</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#types</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#procedure-name</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>(?i)\b(procedure)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.procedure.fortran</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>array-constructor</key>
      <dict>
        <key>name</key>
        <string>meta.contructor.array</string>
        <key>begin</key>
        <string>(?=\s*(\[|\(\/))</string>
        <key>end</key>
        <string>(?&lt;!\G)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#brackets</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>\s*(\(\/)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.bracket.left.fortran</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\/\))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.bracket.left.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#constants</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#operators</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#array-constructor</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#parentheses</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#intrinsic-functions</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#variable</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>brackets</key>
      <dict>
        <key>begin</key>
        <string>\s*(\[)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.bracket.left.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\])</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.bracket.left.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#constants</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#array-constructor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parentheses</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#intrinsic-functions</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable</string>
          </dict>
        </array>
      </dict>
      <key>dummy-variable-list</key>
      <dict>
        <key>name</key>
        <string>meta.dummy-variable-list</string>
        <key>begin</key>
        <string>\G\s*(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.begin.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)|(?=\n)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.end.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#dummy-variable</string>
          </dict>
        </array>
      </dict>
      <key>dummy-variable</key>
      <dict>
        <key>comment</key>
        <string>dummy variable</string>
        <key>match</key>
        <string>(?i)(?:^|(?&lt;=[&amp;,\(]))\s*([a-z]\w*)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>variable.parameter.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>invalid-character</key>
      <dict>
        <key>name</key>
        <string>invalid.error.character.fortran</string>
        <key>match</key>
        <string>(?i)[^\s;!\n]+</string>
      </dict>
      <key>invalid-word</key>
      <dict>
        <key>name</key>
        <string>invalid.error.word.fortran</string>
        <key>match</key>
        <string>(?i)\b\w+\b</string>
      </dict>
      <key>IO-item-list</key>
      <dict>
        <key>comment</key>
        <string>Name list.</string>
        <key>contentName</key>
        <string>meta.name-list.fortran</string>
        <key>begin</key>
        <string>(?i)(?=\s*[a-z0-9"'])</string>
        <key>end</key>
        <string>(?=[\);!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#constants</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#intrinsic-functions</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#array-constructor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parentheses</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#brackets</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#assignment-keyword</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#operator-keyword</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable</string>
          </dict>
        </array>
      </dict>
      <key>logical-control-expression</key>
      <dict>
        <key>name</key>
        <string>meta.expression.control.logical.fortran</string>
        <key>begin</key>
        <string>\G(?=\s*\()</string>
        <key>end</key>
        <string>(?&lt;!\G)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parentheses</string>
          </dict>
        </array>
      </dict>
      <key>name-list</key>
      <dict>
        <key>comment</key>
        <string>Name list.</string>
        <key>contentName</key>
        <string>meta.name-list.fortran</string>
        <key>begin</key>
        <string>(?i)(?=\s*[a-z])</string>
        <key>end</key>
        <string>(?=[\);!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#constants</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#intrinsic-functions</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#array-constructor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parentheses</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#brackets</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#assignment-keyword</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#operator-keyword</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable</string>
          </dict>
        </array>
      </dict>
      <key>assignment-keyword</key>
      <dict>
        <key>comment</key>
        <string>Assignment generic specification.</string>
        <key>begin</key>
        <string>(?i)\G\s*\b(assignment)\s*(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.generic-spec.assignment.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.left.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.right.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#assignment-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#invalid-word</string>
          </dict>
        </array>
      </dict>
      <key>IO-keywords</key>
      <dict>
        <key>comment</key>
        <string>IO generic specification.</string>
        <key>begin</key>
        <string>(?i)\G\s*\b(?:(read)|(write))\s*(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.generic-spec.read.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.control.generic-spec.write.fortran</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.left.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.right.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?i)\G\s*\b(?:(formatted)|(unformatted))\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.generic-spec.formatted.fortran</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.generic-spec.unformatted.fortran</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#invalid-word</string>
          </dict>
        </array>
      </dict>
      <key>operator-keyword</key>
      <dict>
        <key>comment</key>
        <string>Operator generic specification.</string>
        <key>begin</key>
        <string>(?i)\s*\b(operator)\s*(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.generic-spec.operator.fortran</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.left.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.right.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#arithmetic-operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#logical-operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#user-defined-operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#invalid-word</string>
          </dict>
        </array>
      </dict>
      <key>parentheses</key>
      <dict>
        <key>begin</key>
        <string>\s*(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.left.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.right.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#constants</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#array-constructor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parentheses</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#intrinsic-functions</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable</string>
          </dict>
        </array>
      </dict>
      <key>parentheses-dummy-variables</key>
      <dict>
        <key>begin</key>
        <string>\s*(\()</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.left.fortran</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\))</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.parentheses.right.fortran</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#procedure-call-dummy-variable</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#constants</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#array-constructor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parentheses</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#intrinsic-functions</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable</string>
          </dict>
        </array>
      </dict>
      <key>procedure-call-dummy-variable</key>
      <dict>
        <key>name</key>
        <string>variable.parameter.dummy-variable.fortran.modern</string>
        <key>match</key>
        <string>(?i)\s*([a-z]\w*)(?=\s*\=)(?!\s*\=\=)</string>
      </dict>
      <key>procedure-name</key>
      <dict>
        <key>comment</key>
        <string>Procedure name.</string>
        <key>match</key>
        <string>(?i)\s*\b([a-z]\w*)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.procedure.fortran</string>
          </dict>
        </dict>
      </dict>
      <key>procedure-name-list</key>
      <dict>
        <key>comment</key>
        <string>Name list.</string>
        <key>contentName</key>
        <string>meta.name-list.fortran</string>
        <key>begin</key>
        <string>(?i)(?=\s*[a-z])</string>
        <key>end</key>
        <string>(?=[;!\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?!\s*\n)</string>
            <key>end</key>
            <string>(,)|(?=[!;\n])</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.comma.fortran</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#procedure-name</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#pointer-operators</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>variable</key>
      <dict>
        <key>name</key>
        <string>meta.parameter.fortran</string>
        <key>begin</key>
        <string>(?i)\b(?=[a-z])</string>
        <key>end</key>
        <string>(?&lt;!\G)</string>
        <key>applyEndPatternLast</key>
        <integer>1</integer>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#brackets</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#derived-type-operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parentheses-dummy-variables</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#word</string>
          </dict>
        </array>
      </dict>
      <key>word</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?i)(?:\G|(?&lt;=\%))\s*\b([a-z]\w*)\b</string>
          </dict>
        </array>
      </dict>
    </dict>
  </dict>
</plist>