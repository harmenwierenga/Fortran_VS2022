<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>comment</key>
    <string>OpenMP rules for Fortran.</string>
    <key>scopeName</key>
    <string>source.openmp</string>
    <key>injectionSelector</key>
    <string>comment</string>
    <key>fileTypes</key>
    <array/>
    <key>injections</key>
    <dict>
      <key>source.fortran.free - ( string | comment )</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#line-continuation-operator</string>
          </dict>
        </array>
      </dict>
      <key>string.quoted.double.fortran</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string-line-continuation-operator</string>
          </dict>
        </array>
      </dict>
      <key>string.quoted.single.fortran</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string-line-continuation-operator</string>
          </dict>
        </array>
      </dict>
    </dict>
    <key>patterns</key>
    <array>
      <dict>
        <key>name</key>
        <string>meta.openmp.directive</string>
        <key>begin</key>
        <string>(?i)\G(\$(omp\b)&amp;?)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>comment.directive.openmp</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[\n])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#environment-variables</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#intrinsic-functions</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#synchronization-constructs</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#end-directives</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#directives</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#clauses</string>
          </dict>
        </array>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>clauses</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?i)\b(collapse)\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.openmp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>constant.numeric.openmp</string>
                <key>match</key>
                <string>\G\s*\d+</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#invalid-word</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\b(copyin)\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.openmp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#variable-list</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\b(default|firstprivate|private)\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.openmp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
                <key>match</key>
                <string>(?i)\G(firstprivate|none|private|shared)</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#invalid-word</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\b(firstprivate)\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.openmp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#variable-list</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\b(if)\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.openmp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\b(lastprivate)\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.openmp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#variable-list</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(ordered)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(nowait)\b</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\b(num_threads)\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.openmp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\b(private)\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.openmp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#variable-list</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\b(proc_bind)\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.openmp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
                <key>match</key>
                <string>(?i)\G(close|master|spread)</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#invalid-word</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\b(reduction)\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.openmp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>\G(?=\s*[^\)\n])</string>
                <key>end</key>
                <string>(:)|(?=\))</string>
                <key>endCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>operator.colon.openmp</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>name</key>
                    <string>string.regexp.openmp</string>
                    <key>match</key>
                    <string>(?i)\G\s*(\+|\-|\*|\.and\.|\.or\.|\.eqv\.|\.neqv\.|\b(max|min|iand|ior|ieor)\b)</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#invalid-word</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#variable-list</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\b(schedule)\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.openmp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(?i)\G\s*(dynamic|guided|static)\b</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>string.regexp.openmp</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=\))</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>begin</key>
                    <string>\G\s*(,)</string>
                    <key>beginCaptures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.comma.openmp</string>
                      </dict>
                    </dict>
                    <key>end</key>
                    <string>(?=\))</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#invalid-word</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
                <key>match</key>
                <string>(?i)\G\s*\b(auto|runtime)\b</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#invalid-word</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\b(shared)\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.right.openmp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#variable-list</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>directives</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>do-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(do(\s*simd)?)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>declare-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(declare(\s*reduction|\s*simd|\s*target)?)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>distribute-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(distribute(\s*parallel\s*do)?(\s*simd)?)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>parallel-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(parallel(\s*do(\s*simd)?|\s*sections|\s*workshare)?)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>sections-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(sections)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>shared-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(shared)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>single-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(single)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>target-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(target(\s*data|teams(\s*distribute(\s*parallel\s*do)?(\s*simd)?)?|\s*update)?)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>task-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(task)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>teams-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(teams(\s*distribute(\s*parallel\s*do)?(\s*simd)?)?)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>threadprivate-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(threadprivate)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>workshare-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(workshare)\b</string>
          </dict>
        </array>
      </dict>
      <key>end-directives</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>end-atomic-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(end\s*atomic)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>end-distribute-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(end\s*distribute(\s*parallel\s*do)?(\s*simd)?)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>end-do-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(end\s*do(\s*simd)?)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>end-parallel-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(end\s*parallel(\s*do(\s*simd)?|\s*sections|\s*workshare)?)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>end-sections-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(end\s*sections)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>end-simd-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(end\s*simd)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>end-single-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(end\s*single)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>end-target-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(end\s*target(\s*data|\s*teams(\s*distribute(\s*parallel\s*do)?(\s*simd)?)?|\s*update)?)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>end-task-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(end\s*task)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>end-teams-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(end\s*teams(\s*distribute(\s*parallel\s*do)?(\s*simd)?)?)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>end-workshare-directive</string>
            <key>name</key>
            <string>string.regexp.openmp</string>
            <key>match</key>
            <string>(?i)\b(end\s*workshare)\b</string>
          </dict>
        </array>
      </dict>
      <key>environment-variables</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>variable.parameter.openmp</string>
            <key>match</key>
            <string>(?i)\b(omp_dynamic)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>variable.parameter.openmp</string>
            <key>match</key>
            <string>(?i)\b(omp_nested)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>variable.parameter.openmp</string>
            <key>match</key>
            <string>(?i)\b(omp_num_threads)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>variable.parameter.openmp</string>
            <key>match</key>
            <string>(?i)\b(omp_schedule)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>variable.parameter.openmp</string>
            <key>match</key>
            <string>(?i)\b(omp_proc_bind)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>variable.parameter.openmp</string>
            <key>match</key>
            <string>(?i)\b(omp_stacksize)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>variable.parameter.openmp</string>
            <key>match</key>
            <string>(?i)\b(omp_wait_policy)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>variable.parameter.openmp</string>
            <key>match</key>
            <string>(?i)\b(omp_thread_limit)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>variable.parameter.openmp</string>
            <key>match</key>
            <string>(?i)\b(omp_max_active_levels)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>variable.parameter.openmp</string>
            <key>match</key>
            <string>(?i)\b(omp_places)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>variable.parameter.openmp</string>
            <key>match</key>
            <string>(?i)\b(omp_cancelation)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>variable.parameter.openmp</string>
            <key>match</key>
            <string>(?i)\b(omp_default_device)\b</string>
          </dict>
        </array>
      </dict>
      <key>intrinsic-functions</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?i)\b(omp_get_(active_levels|cancelation|level|proc_bind|thread_limit))\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.function.intrinsic.openmp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.openmp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\b(omp_(get|set)_(default_device|dynamic|max_active_levels|nested|num_threads|schedule))\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.function.intrinsic.openmp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.parentheses.left.openmp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>synchronization-constructs</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?ix) \G\s+( barrier |(end\s*)?master |(end\s*)?ordered |(end\s*)?task\s*group |taskwait )\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[$\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#invalid-word</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\G\s+(flush)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[$\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\G\s+(atomic)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[$\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(?i)\G\s+(capture|read|write|update)\b</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>string.regexp.openmp</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=[$\n])</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>name</key>
                    <string>string.regexp.openmp</string>
                    <key>match</key>
                    <string>(?i)\G\s+(seq_cst)\b</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#invalid-word</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
                <key>match</key>
                <string>(?i)\G\s+(seq_cst)\b</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#invalid-word</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\G\s+(cancel)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[$\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(?i)\G\s+(do|parallel|sections|taskgroup)\b</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>string.regexp.openmp</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=[$\n])</string>
                <key>patterns</key>
                <array/>
              </dict>
              <dict>
                <key>include</key>
                <string>#invalid-word</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\G\s+(cancellation\s+point)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[$\n])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
                <key>match</key>
                <string>(?i)\G\s+(do|parallel|sections|taskgroup)\b</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#invalid-word</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?i)\G\s+((end\s*)?critical)\b</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string.regexp.openmp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[$\n])</string>
            <key>patterns</key>
            <array/>
          </dict>
        </array>
      </dict>
      <key>invalid-word</key>
      <dict>
        <key>name</key>
        <string>invalid.error.openmp</string>
        <key>match</key>
        <string>(?i)\b\w+\b</string>
      </dict>
    </dict>
  </dict>
</plist>